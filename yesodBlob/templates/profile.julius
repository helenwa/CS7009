var svg = d3.select("svg.fdg"),
    width = +svg.attr("width"),
    height = +svg.attr("height");

var color = d3.scaleOrdinal(d3.schemeCategory20);

var simulation = d3.forceSimulation()
    .force("link", d3.forceLink().id(function(d) { return d.id; }))
    .force("charge", d3.forceManyBody())
    .force("center", d3.forceCenter(width / 2, height / 2));

d3.json("http://localhost:8080/fdg", function(error, graph) {
  if (error) throw error;

  var link = svg.append("g")
      .attr("class", "links")
    .selectAll("line")
    .data(graph.links)
    .enter().append("line")
      .attr("stroke-width", function(d) { return Math.sqrt(d.value); });
      
      
  var node = svg.selectAll(".node")
      .data(graph.nodes)
    .enter().append("g")
      .attr("class", "node")
      .call(d3.drag()
          .on("start", dragstarted)
          .on("drag", dragged)
          .on("end", dragended));
  
  var circle = node.append("circle")
      .attr("fill", function(d) { return color(d.group); })
      .attr("r", 4.5);
          
  node.append("title")
      .text(function(d) { return d.id; });
      
  var label = node.append("text")
      .attr("dy", ".35em")
      .text(function(d) { return d.id; });

  simulation
      .nodes(graph.nodes)
      .on("tick", ticked);

  simulation.force("link")
      .links(graph.links);

  function ticked() {
    link
        .attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; });

    node
        .attr("cx", function(d) { return d.x; })
        .attr("cy", function(d) { return d.y; });
    label
        .attr("x", function(d) { return d.x + 8; })
        .attr("y", function(d) { return d.y; });
    circle
        .attr("cx", function(d) { return d.x; })
        .attr("cy", function(d) { return d.y; });
  }
});

function dragstarted(d) {
  if (!d3.event.active) simulation.alphaTarget(0.3).restart();
  d.fx = d.x;
  d.fy = d.y;
}

function dragged(d) {
  d.fx = d3.event.x;
  d.fy = d3.event.y;
}

function dragended(d) {
  if (!d3.event.active) simulation.alphaTarget(0);
  d.fx = null;
  d.fy = null;
}

//start pie chart


var myDuration = 600;
var firstTime = true;

var width = 960,
  height = 500,
  radius = Math.min(width, height) / 2;

var width = 960,
  height = 500,
  radius = Math.min(width, height) / 2;
var color = d3.scaleOrdinal(d3.schemeCategory20);
var pie = d3.pie()
.value(function(d) { return d.count; })
.sort(null);

  var arc = d3.arc()
  .innerRadius(radius - 100)
  .outerRadius(radius - 20);

  var svgPie = d3.select("svg.pie")
  .attr("width", width)
  .attr("height", height)
  .append('g')
  .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

  d3.json("http://localhost:8080/pie/#{rawJS textName}", function(error, data) {
    if (error) throw error;
    var languageByView = d3.nest()
    .key(function(d) { return d.view; })
    .entries(data)
    .reverse();

    var label = d3.select("form").selectAll("label")
    .data(languageByView)
    .enter().append("label");

    label.append("input")
    .attr("type", "radio")
    .attr("name", "view")
    .attr("value", function(d) { return d.key; })
    .on("change", change)
    .filter(function(d, i) { return !i; })
    .each(change)
    .property("checked", true);

    label.append("span")
    .text(function(d) { return d.key; });

    function change(language) {
      var path = svgPie.selectAll("path");
      var data0 = path.data(),
      data1 = pie(language.values);

      path = path.data(data1, key);
      
      path
        .on("mousemove", function(d){
            div.style("left", d3.event.pageX+10+"px");
            div.style("top", d3.event.pageY-25+"px");
            div.style("display", "inline-block");
            div.html(d.data.language);
        });
    path
        .on("mouseout", function(d){
            div.html("");
        });

      path
      .transition()
      .duration(myDuration)
      .attrTween("d", arcTween)


      path
      .enter()
      .append("path")
      .each(function(d, i) {
        var narc = findNeighborArc(i, data0, data1, key) ;
        if(narc) {          
          this._current = narc;
          this._previous = narc;
        } else {          
          this._current = d;
        }
      }) 
      .attr("fill", function(d,i) { 
       return color(d.data.language)
     })
      .transition()
      .duration(myDuration)
      .attrTween("d", arcTween)


      path
      .exit()
      .transition()
      .duration(myDuration)
      .attrTween("d", function(d, index) {
        var currentIndex = this._previous.data.language;
        var i = d3.interpolateObject(d,this._previous);
        return function(t) {
          return arc(i(t))
        }
      })      
      .remove()
      

      firstTime = false;
      
      
    }
  });

  function key(d) {
    return d.data.language;
  }

  function type(d) {
    d.count = +d.count;
    return d;
  }

  function findNeighborArc(i, data0, data1, key) {
    var d;
    if(d = findPreceding(i, data0, data1, key)) {

      var obj = cloneObj(d)
      obj.startAngle = d.endAngle;
      return obj;

    } else if(d = findFollowing(i, data0, data1, key)) {

      var obj = cloneObj(d)
      obj.endAngle = d.startAngle;
      return obj;

    }

    return null


  }

// Find the element in data0 that joins the highest preceding element in data1.
function findPreceding(i, data0, data1, key) {
  var m = data0.length;
  while (--i >= 0) {
    var k = key(data1[i]);
    for (var j = 0; j < m; ++j) {
      if (key(data0[j]) === k) return data0[j];
    }
  }
}

// Find the element in data0 that joins the lowest following element in data1.
function findFollowing(i, data0, data1, key) {
  var n = data1.length, m = data0.length;
  while (++i < n) {
    var k = key(data1[i]);
    for (var j = 0; j < m; ++j) {
      if (key(data0[j]) === k) return data0[j];
    }
  }
}

function arcTween(d) {

  var i = d3.interpolate(this._current, d);

  this._current = i(0);

  return function(t) {
    return arc(i(t))
  }

}


function cloneObj(obj) {
  var o = {};
  for(var i in obj) {
    o[i] = obj[i];
  }
  return o;
}
    
var div = d3.select("div#label").append("div").attr("class", "toolTip").html("");
