var response = $.ajax({
          url: "http://localhost:8080/userList",
          type: "get",
          contentType: "text/plain",
          dataType: "json",
          crossDomain:true,
          success: function( data ) {
            console.log(data);},
          error: function( status ) {
            console.log("failed");
          }
  });
  
var response2 = $.ajax({
          url: "http://localhost:8080/startC/helenwa/4",
          type: "get",
          contentType: "text/plain",
          dataType: "json",
          crossDomain:true,
          success: function( data ) {
            console.log(data);},
          error: function( status ) {
            console.log("failed");
          }
  });
    
var svg = d3.select("svg"),
    width = +svg.attr("width"),
    height = +svg.attr("height");

var color = d3.scaleOrdinal(d3.schemeCategory20);

var simulation = d3.forceSimulation()
    .force("link", d3.forceLink().id(function(d) { return d.id; }))
    .force("charge", d3.forceManyBody())
    .force("center", d3.forceCenter(width / 2, height / 2));

d3.json("http://localhost:8080/fdg", function(error, graph) {
  if (error) throw error;

  var link = svg.append("g")
      .attr("class", "links")
    .selectAll("line")
    .data(graph.links)
    .enter().append("line")
      .attr("stroke-width", function(d) { return Math.sqrt(d.value); });
      
      
  var node = svg.selectAll(".node")
      .data(graph.nodes)
    .enter().append("g")
      .attr("class", "node")
      .call(d3.drag()
          .on("start", dragstarted)
          .on("drag", dragged)
          .on("end", dragended));
  
  var circle = node.append("circle")
      .attr("fill", function(d) { return color(d.group); })
      .attr("r", 4.5);
          
  node.append("title")
      .text(function(d) { return d.id; });
      
  var label = node.append("text")
      .attr("dy", ".35em")
      .text(function(d) { return d.id; });

  simulation
      .nodes(graph.nodes)
      .on("tick", ticked);

  simulation.force("link")
      .links(graph.links);

  function ticked() {
    link
        .attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; });

    node
        .attr("cx", function(d) { return d.x; })
        .attr("cy", function(d) { return d.y; });
    label
        .attr("x", function(d) { return d.x + 8; })
        .attr("y", function(d) { return d.y; });
    circle
        .attr("cx", function(d) { return d.x; })
        .attr("cy", function(d) { return d.y; });
  }
});

function dragstarted(d) {
  if (!d3.event.active) simulation.alphaTarget(0.3).restart();
  d.fx = d.x;
  d.fy = d.y;
}

function dragged(d) {
  d.fx = d3.event.x;
  d.fy = d3.event.y;
}

function dragended(d) {
  if (!d3.event.active) simulation.alphaTarget(0);
  d.fx = null;
  d.fy = null;
}

//start pie chart
var widthP = 960,
    heightP = 500,
    radius = Math.min(widthP, heightP) / 2;

var color = d3.scale.ordinal()
    .range(["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00"]);

var arc = d3.svg.arc()
    .outerRadius(radius - 10)
    .innerRadius(radius - 70);

var pie = d3.layout.pie()
    .sort(null)
    .value(function(d) { return d.population; });

var svg2 = d3.select(".svg")
    .attr("width", widthP)
    .attr("height", heightP)
  .append("g")
    .attr("transform", "translate(" + widthP / 2 + "," + heightP / 2 + ")");

d3.csv("static/data.csv", type, function(error, data) {
  if (error) throw error;

  var g = svg2.selectAll(".arc")
      .data(pie(data))
    .enter().append("g")
      .attr("class", "arc");

  g.append("path")
      .attr("d", arc)
      .style("fill", function(d) { return color(d.data.age); });

  g.append("text")
      .attr("transform", function(d) { return "translate(" + arc.centroid(d) + ")"; })
      .attr("dy", ".35em")
      .text(function(d) { return d.data.age; });
});

function type(d) {
  d.population = +d.population;
  return d;
}